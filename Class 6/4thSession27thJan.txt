Today's Agenda :- 
-----------------
1. Nested Loops
2. Arrays
3. Strings
----------------------------------------------
Nested Loops :- 
A loop within another loop is called as nested loop. 

Purpose :-  To repeat looping process for n number of times. 
--------------------------------------------------
1 0 0
0 1 0
0 0 1
-------
5 4 3 2 1
4 3 2 1 
3 2 1
2 1
1
------
1 
1 2
1 2 3
1 2 3 4
1 2 3 4 5
1 2 3 4
1 2 3
1 2 
1
-----------------
1 2 3 4 5
1 2 3 4
1 2 3
1 2 
1 
1 2
1 2 3
1 2 3 4
1 2 3 4 5
-----------------
print all prime number b/w 1 - 100
----------------------------------------------------------------------------------------------------
Arrays :- 
---------
it is a variable which allows to store multiple values of specific data type. 

these are classified into 3 types

1.  Single Dimensional Array
2.  Double/Multi Dimensional Array
3.  Jagged Array

Single Dimensional Array:-  the process of arranging values either in single row / single column. 

		initilization process :-  <data type>  <variable>[] = {val1, val2, ....}
						int x[] = {10,20,30,40,50};
		Array provides to access each value, some numeric values called as Index numbers
				these index numbers starts from 0, 1, 2, ......
			arrayname[index]  = to get value / to set new value

  		Dynamic Process :-  <data type> <variable>[] = new <data type>[size];
				int x[] = new int[5];
Double Dimensional Array :- the process of arranging values in no of rows and no of columms.
		
		initilization process :-   
			<data type> <variable>[][] = {{val1, val2, ..}, {val3, val4, ..}, ....};
			int x[][] = {{10,20,30},{40,50,60}};
	Here also maintains index numbers, but every row and column having index numbers 
			starts from 0, 1, 2, .... 
		arrayname[row index][column index] =  to get value/ to set value
				x[0][0] = 10
				x[0][1] = 20
				x[0][2] = 30

				x[1][0] = 40
				x[1][1] = 50
				x[1][2] = 60
		Dynamic Process 
				<data type>  <variable>[][] = new <data type>[row][col];
				int x[][] = new int[3][3];

Jagged Array :-  this is one type of multi dimensional array, but here no of rows are fixed and in every row different no of columns are exist. 
	<data type> <variable>[][] = {{val1, val2, ..}, {val3, val4, val5, ..}, ....};
		int x[][] = {{10,20,30}, {40,50}, {70,80,90,67}};
Here also maintains index numbers, but every row and column having index numbers 
			starts from 0, 1, 2, .... 
Dynamic Process
<data type>  <variable>[][] = new <data type>[rows][];
		for column specification
			variable[row index] = new <data type>[no of cols];
		it has to repeat for n number of rows
				int x[][] = new int[3][];
					x[0] = new int[3];
					x[1] = new int[4];
					x[2] = new int[2]
--------------------------------------
1. Write a program  to extract all even numbers from double dimensional array then add those values into single dimensional array then print. 
2. Write a program matrix multiplication.